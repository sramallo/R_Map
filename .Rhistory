a <- 1:3
1 <- 3
a <- 1
ls()
x <- 0:10
class(x)
a <- as.numeric(x)
b <- as.logical(x)
c <- as.character(x)
c <- as.integer(x)
class(a)
a
b
c
d
d <- as.integer(x)
d
m <- matrix(nrow = 2, ncol = 3)
m
dim(m)
class(dim(m))
attributes(m)
m <- 1:10
m
dim(m) <- c(2,5)
m
x <- 5:8
y <- 12:15
cbind(x,y)
rbind(x,y)
2 + 3 * 4 / 5
2 + ((3 * 4) / 5)
?base:Sintax
a <- 1:3
b <- 1:3
a+b
Sys.setlocale("LC_ALL", "en_US.UTF-8")
swirl()
swirl()
load("~/Documents/Curso R/Lección 1.RData")
swirl()
swirl()
library("swirl")
swirl()
3 + 7
mi_variable <- (180 / 6) - 15
mi_variable
y <- c(561, 1105, 1729, 2465, 2821)
print(y)
1:100
c(1.1, 2.2, 3.3, 4.4) - c(1, 1, 1, 1)
c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) -
| c(1, 2)
c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10) - c(1, 2)
ls()
"¡Hola Mundo!"
colores <- "rojo", "azul", "verde", "azul", "rojo"
colores <- ("rojo", "azul", "verde", "azul", "rojo")
colores <- c("rojo", "azul", "verde", "azul", "rojo")
print(colores)
complejo <- 2+1i
mi_variable == 15
length(complejo) <- 3
print(complejo)
2^1024
0/0
fecha_primer_curso_R <- Sys.Date()
fecha_primer_curso_R
vector("numeric", length = 10)
vector("character", length = 10)
vector("logical", length = 10)
list(0,"Hola",T)
list(0,"Hola",TRUE)
c(T, 19, 1+3i)
c <- vector("numeric",5)
c
as.logical(c)
class(c)
class(as.logical(c))
m <- matrix(data=1:12,nrow=4,ncol=3)
print(m)
factor(colores)
data.frame(llave=y, color=colores)
mi_variable <- (180 / 60) - 15
mi_variable
swirl()
mi_vector = 11:30
info()
mi_vector = vector(11:30)
mi_vector = vector("integer",11:30)
mi_vector <- 11:30
mi_vector
mi_vector[3]
mi_vector[1:5]
mi_vector[c(4,6,13)]
mi_vector[c(6,13,4)]
mi_vector[[3]]
mi_vector[-9:15]
mi_vector[-9:-15]
mi_vector <- (rep(c(TRUE,FALSE),10))
mi_vector[rep(c(TRUE,FALSE),10)]
mi_vector[c(FALSE,FALSE,TRUE)]
mi_vector > 20
mi_vector[(mi_vector > 20)]
mi_arreglo <- array(c(1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18),dim=c(3,3,2))
mi_arreglo
mi_arreglo[1,3,2]
mi_arreglo[1:2,1:2,1]
mi_matriz <- Matrix(nrow=3,ncolumn=3)
mi_matriz <- matrix(nrow=3,ncolumn=3)
mi_matriz <- matrix(c(1:9),nrow=3,ncol=3)
mi_matriz[1,]
mi_matriz[,1]
mi_matriz[2:3,]
mi_matriz[c(1,3),]
carro <- list(color="rojo", nllantas=4, marca= "Renault", ncilindros=4)
carro$color
carro[c("ncilindros","nllantas")]
ingresa carro[["marca"]]
carro[["marca"]]
carro[["mar",exact=FALSE]]
camioneta <- list(color="azul", nllantas=4, marca= "BMW", ncilindros=6)
cochera <- list(carro, camioneta)
cochera
cochera[[c(2, 1)]]
cars
cars$speed
cars$dist>100
cars$speed[cars$dist>100]
swirl()
datos <- read.table("swirl_temp/inmigintnalpry.csv", header=TRUE, sep=",", fileEncoding = "latin1")
datos_2 <- read.table("swirl_temp/inmigintnalpry.csv", header=TRUE, sep=",")
ok()
View(datos)
inicial <- read.table("swirl_temp/inmigintnalpry.csv", header=TRUE, sep=",", fileEncoding "latin1", nrow = 100)
inicial <- read.table("swirl_temp/inmigintnalpry.csv", header=TRUE, sep=",", fileEncoding "latin2", nrow = 100)
inicial <- read.table("swirl_temp/inmigintnalpry.csv", header=TRUE, sep=",", fileEncoding = "latin1", nrows = 100)
clases <- sapply(inicial, class)
clases
datos <- read.table("swirl_temp/inmigintnalpry.csv", header=TRUE, sep=",", fileEncoding = "latin1", colClasses=clases)
save(datos, clases, file="swirl_temp/datos_inmigrates.RData")
rm(datos,clases)
ls()
load("swirl_temp/datos_inmigrates.RData")
ls()
write.table(datos, file="swirl_temp/datos.txt")
save.image("~/Documents/Curso R/Semana 1.RData")
library("swirl")
swirl()
demo(graphics)
swirl()
ls()
rm(list=ls())
rm(list=ls())
ls()
q()
library("swirl")
swirl()
demo(graphics)
swirl()
demo(graphics)
library("swirl")
swirl()
plot(1:5)
plot(c(1, 2, 3), c(4, 5, 6))
?plot
plot(c(1, 2, 3), c(4, 5, 6), type="l")
plot(6:10, type="s")
plot(1:10, type="b")
plot(1:5, main="Mi gráfica")
plot(1:5, main="Mi gráfica", xlab="x", ylab="y")
points(c(1, 5), c(4, 2), col="green")
lines(c(1, 4), c(2, 5), col="yellow")
abline(h=3,col="red",lty=2)
abline(h=1:5,v=1:5, col="purple")
data("iris")
class(iris)
head(iris)
plot(iris)
plot(iris$Petal.Length, iris$Petal.Width)
hist(iris$Petal.Length, col="red")
hist(iris$Petal.Length, col="red", freq=FALSE)
hist(iris$Petal.Length, col="red", breaks=5)
?boxplot
boxplot(Sepal.Width ~ Species, data=iris, col=2:4)
pie(c(50, 50, 50), labels=levels(iris$Species))
?par
par()
par_orig <- par()
par("col")
par(col="blue")
data("iris")
plot(iris)
par()
par("col")
plot(iris, col=iris$Species)
dimnames(iris)
Column.names(iris)
Colnames(iris)
colnames(iris)
colnames(iris)
nombres_cols <- colnames(iris)
info()
skip()
Ingresa plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)
par(pch=15)
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, pch="A")
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)
plot(1:26, pch=0:25)
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, pch = 21, bg = "blue")
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, cex = 2)
legend(x = 4.5, y = 7, legend = levels(iris$Species), col = c(1:3), pch = 16)
par(par_orig)
library("swirl")
swirl()
colors()
help("grep")
grep("yellow", colors(), value=TRUE)
count(colors)
length(colors())
palette()
plot(1:8, col=1:8, main="Colores por índice", pch=17, cex=3)
plot(1:12, col=1:12, main="Colores reciclados", pch=18, cex=3)
paleta_arcoiris <- rainbow(10)
paleta_arcoiris
palette(paleta_arcoiris)
palette()
plot(1:10, col=1:10, main="Paleta Arcoiris",pch=17, cex=3)
paleta_calida <- heat.colors(10)
palette(paleta_calida)
plot(1:10, col=1:10, main="Paleta Cálida",pch=17, cex=3)
vector(c("red", "green" y "#0019FFFF"))
vector(c("red", "green", "#0019FFFF"))
mi_paleta <- c("red", "green", "#0019FFFF")
plot(1:10, col=mi_paleta, main="Mi Paleta",pch=17, cex=3)
palette(mi_paleta)
plot(1:10, col=1:10, main="Mi Paleta",pch=17, cex=3)
palette("default")
plot(1:20, type="n")
text(5, 5, "¡Hola Mundo!")
help(text())
help(text)
Ingresa text(11, 11, "¡Hola Mundo! x2", cex=2)
text(11, 11, "¡Hola Mundo! x2", cex=2)
text(7, 7, "¡Hola Mundo con Serif!", family="serif")
text(9, 9, "¡Hola Mundo con Mono!", family="mono")
text(13, 13, "¡Hola Mundo con Sans!", family="sans")
demo(plotmath)
plot(1:10, type="n", main=expression(alpha + beta))
plot(1:10, type="n", xlab = expression(paste("Valores de ", x^phi1)))
?plotmath
t <- 10
plot(1:t, main=substitute(paste("La gráfica del vector 1:", x), list(x=t)))
t <- 20
plot(1:t, main=substitute(paste("La gráfica del vector 1:", x), list(x=t)))
?substitute
swirl()
swirl()
install.packages("rgl")
swirl()
swirl()
swirl()
ls
rm(list = ls())
library("swirl")
(.packages())
swirl()
swirl()
install.packages("rgl")
(.packages())
library("rgl")
(.packages())
swirl()
info()
skip()
library("rgl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("rgl")
library("rgl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("swirl")
swirl()
(.packages())
library("rgl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
(.packages())
swirl()
swirl()
load(iris)
load("iris)
data("iris")
head(iris)
x <- iris$Sepal.Length
y <- iris$Petal.Length
z <- iris$Setal.Width
z <- iris$Sepal.Width
?rgl
open3d()
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width)
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width, type="s")
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width, type="s", col=rainbow(150))
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width, type="s", col=as.integer(iris$Species))
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width, type="s", col=as.integer(iris$Species), radius=1.5)
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width, type="l", col=as.integer(iris$Species), xlab ="Sepal.Length", ylab = "Petal.Length", zlab = "Sepal.Width")
?plot3d
library("swirl")
swirl()
0
swirl()
texto <- "¡Hola Mundo!"
texto[1]
texto[2]
help("substring")
substring(texto,7,11)
substring(texto, 7, 11) <- "Swirl"
texto
nchar(texto)
paste("¡Adiós", "Mundo!")
paste("¡Adiós", "Mundo!", sep="_")
i <- 9
sprintf("El cuadrado de %d es %d", i, i^2)
?sprintf
strsplit("Me/gusta/programar/en/R", "/")
chartr("o", "a", "¡Hola Mundo!")
patron <- "H(a|ä|ae)ndel"
musicos
grep(patron, musicos)
nuevo_patron <- ".(a|ä|ae|e)ndel"
grep(nuevo_patron, musicos)
regexpr(patron, musicos)
gregexpr(patron, "Georg Friedrich Händel, en inglés George Frideric Handel fue un compositor alemán.")
?regexpr
data(diamonds)
View(diamonds)
?qplot
qplot(color, data=diamonds)
qplot(carat, price, data=diamonds)
qplot(log(carat), log(price), data=diamonds)
qplot(carat, x*y*z, data=diamonds)
qplot(carat, price, data=diamonds, color=color)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, alpha=I(1/10))
qplot(carat, price, data=diamonds, alpha=I(1/100))
qplot(carat, price, data=diamonds, size=table)
qplot(carat, price, data=diamonds, facets = color ~ .)
qplot(carat, price, data=diamonds, geom = c("point", "smooth"))
qplot(color, price/carat, data=diamonds, geom = "jitter")
qplot(color, price/carat, data=diamonds, geom = "boxplot")
?Normal
help(Distributions)
?rbinom
rbinom(1, 7, 0.5)
rbinom(100000, 7, 0.5)
resultado <- rbinom(100000, 7, 0.5)
tail(resultado)
tail(resultado > 5)
mean(resultado > 5)
?set.seed
install.packages("devtools")
library(devtools)
install.packages("curl")
library(curl)
install_github("skardhamar/rga")
library(rga)
rga.open(instance = "ga")
id <- "158795800"
ga$getData(id)
gaData <- ga$getData(id, start.date = as.Date("2015-09-01"), end.date=as.Date("2015-09-30"), metrics = "ga:pageviews,ga:entrances",dimensions = "ga:date", filter = "ga:country=~United States|Canada;ga:medium==organic",sort = "-ga:pageviews", start = 10)
rga.open(instance = "ga")
quit
library(devtools)
library(curl)
library(rga)
rga.open(instance = "ga")
id <- "158795800"
ga$getData(id)
ga$getData(id, start.date, end.date, metrics = "ga:visits", dimensions = "ga:date", sort = "", filters = "", segment = "", start = 1, max = 1000)
start.date <- '2017-08-01'
end.date <- '2017-08-28'
ga$getData(id, start.date, end.date, metrics = "ga:visits", dimensions = "ga:date", sort = "", filters = "", segment = "", start = 1, max = 1000)
getwd()
write.csv(gaData, "/users/sramallo/My Data Export.csv")
write.csv(gaData, "My Data Export.csv")
gaData <- ga$getData(id, start.date, end.date, metrics = "ga:visits", dimensions = "ga:date", sort = "", filters = "", segment = "", start = 1, max = 1000)
write.csv(gaData, "/users/sramallo/My Data Export.csv")
install.packages("ggplot2")
library(ggplot2)
ggplot(gaData, aes(date, sessions)) + geom_line() + ylab("Daily Sessions") + theme_bw() + ggtitle("Staging")
ggplot(gaData, aes(date, visits)) + geom_line() + ylab("Daily Sessions") + theme_bw() + ggtitle("Staging")
gaData <- ga$getData(id, start.date, end.date, metrics = "ga:visits", dimensions = "ga:date", sort = "", filters = "", segment = "", start = 1, max = 1000)
gaData <- ga$getData(id, start.date, end.date, metrics = "ga:visits", dimensions = "ga:date", sort = "", filters = "", segment = "", start = 1, max = 1000)
write.csv(gaData, "/users/sramallo/My Data Export.csv")
ggplot(gaData, aes(date, visits)) + geom_line() + ylab("Daily Sessions") + theme_bw() + ggtitle("Staging")
gaData <- ga$getData(id, start.date, end.date, metrics = "ga:visits", dimensions = "ga:date", sort = "", filters = "", segment = "", start = 1, max = 1000)
ggplot(gaData, aes(date, visits)) + geom_line() + ylab("Daily Sessions") + theme_bw() + ggtitle("Staging")
gaData <- ga$getData(id, start.date, end.date, metrics = "ga:visits", dimensions = "ga:date", sort = "", filters = "", segment = "", start = 1, max = 1000)
write.csv(gaData, "/users/sramallo/My Data Export.csv")
ggplot(gaData, aes(date, visits)) + geom_line() + ylab("Daily Sessions") + theme_bw() + ggtitle("Staging")
end.date <- '2017-08-29'
gaData <- ga$getData(id, start.date, end.date, metrics = "ga:visits", dimensions = "ga:date", sort = "", filters = "", segment = "", start = 1, max = 1000)
write.csv(gaData, "/users/sramallo/My Data Export.csv")
ggplot(gaData, aes(date, visits)) + geom_line() + ylab("Daily Sessions") + theme_bw() + ggtitle("Staging")
start.date <- '2017-08-25'
gaData <- ga$getData(id, start.date, end.date, metrics = "ga:visits", dimensions = "ga:date", sort = "", filters = "", segment = "", start = 1, max = 1000)
write.csv(gaData, "/users/sramallo/My Data Export.csv")
ggplot(gaData, aes(date, visits)) + geom_line() + ylab("Daily Sessions") + theme_bw() + ggtitle("Staging")
rga.open(instance = "ga")
install.packages("googleAnalyticsR")
install.packages("googleAnalyticsR")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library("shiny", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
install.packages("shiny")
install.packages("shiny")
library(shiny)
runExample("01_hello")
getwd()
run("App-1")
runApp("App-1")
runApp("App-1")
runApp("App-1", display.mode = "showcase")
runApp("App-1", display.mode = "lowercase")
runApp("App-1", display.mode = "normal")
runApp('App-1')
runExample("02_text")
runExample("03_reactivity")
runExample("04_mpg")
runExample("05_sliders")
runExample("06_tabsets")
runExample("07_widgets")
runExample("08_html")
runExample("09_upload")
runExample("10_download")
runExample("11_timer")
runApp('App-1')
runApp('census-app')
runApp('census-app')
runApp("census-app", display.mode = "showcase")
runApp("census-app")
counties <- readRDS("census-app/data/counties.rds")
head(counties)
install.packages(c("maps", "mapproj"))
library(maps)
library(mapproj)
source("census-app/helpers.R")
counties <- readRDS("census-app/data/counties.rds")
percent_map(counties$white, "darkgreen", "% White")
source("helpers.R")
counties <- readRDS("data/counties.rds")
getwd()
setwd("~/census-app")
source("helpers.R")
counties <- readRDS("data/counties.rds")
runApp()
setwd("~/")
runApp("stockVis")
install.packages("quantmod")
runApp("stockVis")
runApp('census-app')
runApp('App-1')
getwd()
setwd("~/census-app")
runApp('~/stockVis')
runApp('~/App-1')
runApp()
